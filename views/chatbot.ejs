<div class="container-fluid h-100">
    <div class="row h-100">
        <!-- Chat Container -->
        <div class="col-lg-8 col-md-10 mx-auto h-100">
            <div class="chat-container">
                <!-- Chat Header -->
                <div class="chat-header">
                    <div class="d-flex align-items-center">
                        <div class="bot-avatar">
                            <i class="fas fa-robot"></i>
                        </div>
                        <div class="bot-info">
                            <h4 class="mb-1">StudyBot</h4>
                            <small class="text-muted">Your AI Study Assistant</small>
                        </div>
                        <div class="ms-auto">
                            <button class="btn btn-outline-light btn-sm" onclick="clearChat()">
                                <i class="fas fa-trash me-1"></i>Clear Chat
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Chat Messages -->
                <div class="chat-messages" id="chatMessages">
                    <!-- Welcome Message -->
                    <div class="message bot-message">
                        <div class="message-avatar">
                            <i class="fas fa-robot"></i>
                        </div>
                        <div class="message-content">
                            <div class="message-bubble">
                                <p>Hello! I'm StudyBot, your AI study assistant. ü§ñ</p>
                                <p>I'm here to help you with:</p>
                                <ul>
                                    <li>üìö Explaining complex concepts</li>
                                    <li>üìù Study tips and techniques</li>
                                    <li>üéØ Exam preparation</li>
                                    <li>üß† Problem-solving guidance</li>
                                    <li>üìñ Research assistance</li>
                                </ul>
                                <p>What would you like to learn about today?</p>
                            </div>
                            <small class="message-time">Just now</small>
                        </div>
                    </div>
                </div>

                <!-- Chat Input -->
                <div class="chat-input">
                    <form id="chatForm" class="d-flex">
                        <div class="input-group">
                            <input type="text" 
                                   class="form-control" 
                                   id="messageInput" 
                                   placeholder="Ask me anything about your studies..." 
                                   autocomplete="off"
                                   maxlength="1000">
                            <button class="btn btn-primary" type="submit" id="sendButton">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </form>
                    <div class="input-suggestions">
                        <small class="text-muted">
                            Try: "Explain calculus derivatives" or "Study tips for exams"
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sidebar with Quick Actions -->
        <div class="col-lg-4 d-none d-lg-block">
            <div class="sidebar">
                <div class="quick-actions">
                    <h5><i class="fas fa-lightning-bolt me-2"></i>Quick Actions</h5>
                    <div class="action-buttons">
                        <button class="btn btn-outline-primary w-100 mb-2" onclick="sendQuickMessage('Explain the basics of data structures')">
                            <i class="fas fa-code me-2"></i>Data Structures
                        </button>
                        <button class="btn btn-outline-success w-100 mb-2" onclick="sendQuickMessage('Give me study tips for better concentration')">
                            <i class="fas fa-brain me-2"></i>Study Tips
                        </button>
                        <button class="btn btn-outline-info w-100 mb-2" onclick="sendQuickMessage('How to prepare for exams effectively?')">
                            <i class="fas fa-graduation-cap me-2"></i>Exam Prep
                        </button>
                        <button class="btn btn-outline-warning w-100 mb-2" onclick="sendQuickMessage('Explain calculus derivatives with examples')">
                            <i class="fas fa-calculator me-2"></i>Mathematics
                        </button>
                        <button class="btn btn-outline-danger w-100 mb-2" onclick="sendQuickMessage('Time management tips for students')">
                            <i class="fas fa-clock me-2"></i>Time Management
                        </button>
                    </div>
                </div>

                <div class="chat-stats mt-4">
                    <h6><i class="fas fa-chart-bar me-2"></i>Chat Statistics</h6>
                    <div class="stat-item">
                        <span>Messages sent:</span>
                        <span id="messageCount">0</span>
                    </div>
                    <div class="stat-item">
                        <span>Session time:</span>
                        <span id="sessionTimer">00:00</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Modal -->
<div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">StudyBot is thinking...</p>
    </div>
</div>

<style>
    body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .chat-container {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 120px);
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        margin: 20px 0;
        overflow: hidden;
    }

    .chat-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 20px 20px 0 0;
    }

    .bot-avatar {
        width: 50px;
        height: 50px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        margin-right: 15px;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        background: #f8f9fa;
    }

    .message {
        display: flex;
        margin-bottom: 20px;
        animation: fadeInUp 0.3s ease;
    }

    .user-message {
        justify-content: flex-end;
    }

    .message-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        flex-shrink: 0;
        margin-right: 10px;
    }

    .bot-message .message-avatar {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .user-message .message-avatar {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        margin-left: 10px;
        margin-right: 0;
    }

    .message-content {
        max-width: 70%;
    }

    .message-bubble {
        background: white;
        padding: 15px 20px;
        border-radius: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        position: relative;
    }

    .user-message .message-bubble {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
    }

    .message-bubble::before {
        content: '';
        position: absolute;
        top: 10px;
        width: 0;
        height: 0;
        border: 10px solid transparent;
    }

    .bot-message .message-bubble::before {
        left: -20px;
        border-right-color: white;
    }

    .user-message .message-bubble::before {
        right: -20px;
        border-left-color: #28a745;
    }

    .message-time {
        display: block;
        margin-top: 5px;
        color: #6c757d;
        font-size: 0.8rem;
    }

    .chat-input {
        padding: 20px;
        background: white;
        border-top: 1px solid #e9ecef;
    }

    .chat-input .form-control {
        border-radius: 25px;
        padding: 12px 20px;
        border: 2px solid #e9ecef;
        font-size: 1rem;
    }

    .chat-input .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .chat-input .btn {
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 10px;
    }

    .input-suggestions {
        text-align: center;
        margin-top: 10px;
    }

    .sidebar {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 20px;
        margin: 20px 0;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }

    .quick-actions h5 {
        color: #2c3e50;
        margin-bottom: 15px;
    }

    .action-buttons .btn {
        text-align: left;
        border-radius: 15px;
        padding: 12px 15px;
        transition: all 0.3s ease;
    }

    .action-buttons .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .chat-stats {
        padding: 15px;
        background: rgba(102, 126, 234, 0.1);
        border-radius: 15px;
    }

    .stat-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
        font-size: 0.9rem;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }

    .loading-spinner {
        text-align: center;
        color: white;
    }

    /* Scrollbar styling */
    .chat-messages::-webkit-scrollbar {
        width: 6px;
    }

    .chat-messages::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }

    .chat-messages::-webkit-scrollbar-thumb {
        background: #667eea;
        border-radius: 10px;
    }

    /* Animations */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes typing {
        0% { content: ''; }
        25% { content: '.'; }
        50% { content: '..'; }
        75% { content: '...'; }
        100% { content: ''; }
    }

    .typing::after {
        content: '';
        animation: typing 1.5s infinite;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .chat-container {
            height: calc(100vh - 80px);
            margin: 10px;
            border-radius: 15px;
        }

        .message-content {
            max-width: 85%;
        }

        .chat-header {
            padding: 15px;
        }

        .bot-avatar {
            width: 40px;
            height: 40px;
            font-size: 1.2rem;
        }

        .chat-input {
            padding: 15px;
        }
    }
</style>

<script>
    let conversationHistory = [];
    let messageCount = 0;
    let sessionStartTime = Date.now();
    let sessionTimer;

    // Initialize chat
    document.addEventListener('DOMContentLoaded', function() {
        updateSessionTimer();
        sessionTimer = setInterval(updateSessionTimer, 1000);
        
        // Focus on input
        document.getElementById('messageInput').focus();
    });

    // Handle form submission
    document.getElementById('chatForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const messageInput = document.getElementById('messageInput');
        const message = messageInput.value.trim();
        
        if (message) {
            sendMessage(message);
            messageInput.value = '';
        }
    });

    // Send message function
    async function sendMessage(message) {
        const chatMessages = document.getElementById('chatMessages');
        const sendButton = document.getElementById('sendButton');
        const messageInput = document.getElementById('messageInput');
        
        // Disable input while processing
        sendButton.disabled = true;
        messageInput.disabled = true;
        
        // Add user message to chat
        addMessageToChat(message, 'user');
        
        // Show loading
        showLoading();
        
        try {
            const response = await fetch('/chatbot/message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    conversationHistory: conversationHistory
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                // Add bot response to chat
                addMessageToChat(data.response, 'bot');
                
                // Update conversation history
                conversationHistory.push(
                    { role: 'user', content: message },
                    { role: 'bot', content: data.response }
                );
                
                // Keep only last 20 messages in history
                if (conversationHistory.length > 20) {
                    conversationHistory = conversationHistory.slice(-20);
                }
            } else {
                addMessageToChat(data.error || 'Sorry, I encountered an error. Please try again.', 'bot', true);
            }
        } catch (error) {
            console.error('Error sending message:', error);
            addMessageToChat('Sorry, I encountered a connection error. Please try again.', 'bot', true);
        }
        
        // Hide loading and re-enable input
        hideLoading();
        sendButton.disabled = false;
        messageInput.disabled = false;
        messageInput.focus();
    }

    // Add message to chat display
    function addMessageToChat(message, sender, isError = false) {
        const chatMessages = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}-message`;
        
        const currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        messageDiv.innerHTML = `
            <div class="message-avatar">
                <i class="fas fa-${sender === 'user' ? 'user' : 'robot'}"></i>
            </div>
            <div class="message-content">
                <div class="message-bubble ${isError ? 'bg-danger text-white' : ''}">
                    ${formatMessage(message)}
                </div>
                <small class="message-time">${currentTime}</small>
            </div>
        `;
        
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        if (sender === 'user') {
            messageCount++;
            document.getElementById('messageCount').textContent = messageCount;
        }
    }

    // Format message with basic markdown support
    function formatMessage(message) {
        return message
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/`(.*?)`/g, '<code>$1</code>')
            .replace(/\n/g, '<br>');
    }

    // Quick message functions
    function sendQuickMessage(message) {
        document.getElementById('messageInput').value = message;
        sendMessage(message);
    }

    // Clear chat function
    function clearChat() {
        if (confirm('Are you sure you want to clear the chat history?')) {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.innerHTML = `
                <div class="message bot-message">
                    <div class="message-avatar">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="message-content">
                        <div class="message-bubble">
                            <p>Chat cleared! How can I help you with your studies today?</p>
                        </div>
                        <small class="message-time">Just now</small>
                    </div>
                </div>
            `;
            conversationHistory = [];
            messageCount = 0;
            document.getElementById('messageCount').textContent = messageCount;
        }
    }

    // Loading functions
    function showLoading() {
        document.getElementById('loadingOverlay').style.display = 'flex';
    }

    function hideLoading() {
        document.getElementById('loadingOverlay').style.display = 'none';
    }

    // Update session timer
    function updateSessionTimer() {
        const elapsed = Date.now() - sessionStartTime;
        const minutes = Math.floor(elapsed / 60000);
        const seconds = Math.floor((elapsed % 60000) / 1000);
        document.getElementById('sessionTimer').textContent = 
            `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    // Handle Enter key in input
    document.getElementById('messageInput').addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            document.getElementById('chatForm').dispatchEvent(new Event('submit'));
        }
    });
</script>